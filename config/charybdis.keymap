#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/ext_power.h>
#include "macros.dtsi"

// / {
//     chosen { zmk,matrix_transform = &default_transform; };
// };

/ {
    /* input config for mouse move mode */
    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&trackball>;
        layers = <0 1 2 3>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <2>;
        // bindings = <&ib_toggle_layer 7>;
    };

    /* input config for snipe mode 
    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";   
        device = <&trackball>;
        layers = <8>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <4>;
    }; */

    /* input config for mouse scroll mode */
    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&trackball>;
        layers = <6>;
        evt-type = <INPUT_EV_REL>;            
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 14>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */
    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */
    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };

    behaviors {

        hm: homerow_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <175>; // triggers the hold behavior when the tapping-term-ms has expired
            quick-tap-ms = <150>; // If you press a tapped hold-tap again within quick-tap-ms milliseconds of the first press, it will always trigger the tap behavior.
            require-prior-idle-ms = <185>; // like quick-tap-ms however it will apply for any non-modifier key pressed before it
            bindings = <&kp>, <&kp>;  // hold, tap
        };

        td_cursor: td_scroll_or_cursor {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&lt 9 ESC>, <&to 8>; // hold, tap, double_tap
        };

        httl: ht_two_layers {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&to>;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <125>;
        };

        td_layers: td_layer_swap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&to 0>, <&to 5>, <&to 4>; // tap, double_tap, tripple_tap
        };

        td_clk_scrl: td_click_or_scroll {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&mkp RCLK>, <&mo 9>;  // tap/hold, double_tap
        };

        td_bore: BASE_or_EXTRA {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mo 6>, <&to 0>;
        };
    };


    combos {
        compatible = "zmk,combos";

        LeftClickRight {
            bindings = <&mkp LCLK>;
            key-positions = <30 31>;
        };

        RightClickRight {
            bindings = <&mkp RCLK>;
            key-positions = <31 32>;
        };

        MiddleClickRight {
            bindings = <&mkp MCLK>;
            key-positions = <32 33>;
        };

        ParaLeft {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <4 16>;
        };

        ParaRight {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 19>;
        };

        BrakLeft {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <3 15>;
        };

        BrakRight {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <8 20>;
        };

        BraceLeft {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <2 14>;
        };

        BraceRight {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <9 21>;
        };

        Delete {
            bindings = <&kp DELETE>;
            key-positions = <8 9>;
        };

        CapsWord {
            bindings = <&caps_word>;
            key-positions = <17 18>;
        };

        layer3 {
            bindings = <&mo 3>;
            key-positions = <39 37>;
        };

        scroll {
            bindings = <&mo 6>;
            key-positions = <34 35>;
        };

        ctrl {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <24 24 25>;
        };

        alt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <12 13>;
        };

        win {
            bindings = <&kp LEFT_WIN>;
            key-positions = <0 1>;
        };

        back {
            bindings = <&kp C_PREVIOUS>;
            key-positions = <19 18>;
        };

        forward {
            bindings = <&kp C_NEXT>;
            key-positions = <19 20>;
        };
    };
    
    macros {
        password: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp N>;
            label = "NEW_MACRO";
        };

        oldpassword: oldpassword {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp N>;
            label = "OLDPASSWORD";
        };
    };

// ╭──────┬──────┬──────┬──────┬──────┬──────╮  ╭──────┬──────┬──────┬──────┬──────┬──────╮
//    00     01     02     03    04      05        06     07     08     09     10     11
// ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
//    12     13     14     15    16      17        18     19     20     21     22     23
// ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
//    24     25     26     27    28      29        30     31     32     33     34     35
// ╰──────┴──────┴──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┴──────┴──────┴──────╯
//                         36     37     38        39     40
//                      ╰──────┴──────┴──────╯  ╰──────┴──────╯
// #define BASE    0
// #define NUM     1
// #define NAV     2
// #define SYM     3
// #define GAME    4
// #define PHOTOS  5
// #define EXTRAS  6
// #define MOUSE   7
// #define SLOW    8
// #define SCROLL  9

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp ESC         &kp Q  &kp W  &kp E             &kp R  &kp T        &kp Y  &kp U    &kp I      &kp O    &kp P          &kp BSPC
&kp TAB         &kp A  &kp S  &kp D             &kp F  &kp G        &kp H  &kp J    &kp K      &kp L    &kp SEMICOLON  &kp APOS
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C             &kp V  &kp B        &kp N  &kp M    &kp COMMA  &kp DOT  &kp SLASH      &kp RIGHT_SHIFT
                              &kp LEFT_COMMAND  &mo 1  &kp SPACE    &mo 2  &kp RET
            >;
        };

        NAV {
            bindings = <
&kp ESCAPE      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3      &kp NUMBER_4  &kp NUMBER_5         &kp NUMBER_6    &kp NUMBER_7    &kp NUMBER_8     &kp NUMBER_9  &kp NUMBER_0   &kp F1
&trans          &kp LEFT      &kp DOWN      &kp RIGHT         &trans        &trans               &trans          &kp UP_ARROW    &trans           &trans        &kp PAGE_UP    &kp END
&kp LEFT_SHIFT  &trans        &trans        &kp LA(LG(L))     &kp LA(RET)   &kp LC(RS(SPACE))    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans        &kp PAGE_DOWN  &kp HOME
                                            &kp LEFT_COMMAND  &mo 3         &kp ENTER            &mo 3           &kp ENTER
            >;
        };

        SYMNUM {
            bindings = <
&kp ESCAPE      &kp EXCL  &kp AT       &kp HASH          &kp DLLR  &kp PRCNT    &kp CARET       &kp AMPS   &kp KP_MULTIPLY   &kp LPAR           &kp RPAR       &kp DEL
&trans          &trans    &trans       &trans            &trans    &trans       &kp MINUS       &kp PLUS   &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp BACKSLASH  &kp GRAVE
&kp LEFT_SHIFT  &trans    &bootloader  &trans            &trans    &trans       &kp UNDERSCORE  &kp EQUAL  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp PIPE       &kp TILDE
                                       &kp LEFT_COMMAND  &mo 3     &kp ENTER    &mo 3           &kp ENTER
            >;
        };

        FUN {
            bindings = <
&bt BT_CLR  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &kp F3        &kp F4       &bt BT_SEL 0    &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3     &bt BT_SEL 4  &bt BT_CLR_ALL
&trans      &kp DEL       &kp F5        &kp F6        &kp F7        &kp F8       &kp C_VOL_DN    &kp C_VOLUME_UP  &kp K_MUTE    &kp C_VOLUME_UP  &kp C_MUTE    &kp LALT
&tog 4      &tog 7        &kp F9        &kp F10       &oldpassword  &password    &kp K_PREVIOUS  &kp C_NEXT       &kp C_PAUSE   &trans           &trans        &kp RIGHT_SHIFT
                                        &trans        &trans        &trans       &trans          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans            &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans            &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans            &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &kp LEFT_CONTROL  &trans  &trans    &trans  &trans
            >;
        };

        AUTO-MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };

        gaming {
            bindings = <
&trans            &kp T         &kp B         &kp W           &kp F         &kp V           &kp G              &trans           &trans            &trans  &trans  &tog 7
&kp TAB           &kp NUMBER_1  &kp A         &kp S           &kp D         &kp X           &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp K_MUTE        &trans  &trans  &to 0
&kp LEFT_CONTROL  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4    &kp NUMBER_5  &kp NUMBER_6    &kp K_PREV         &kp K_NEXT       &kp C_PLAY_PAUSE  &trans  &trans  &trans
                                              &kp LEFT_SHIFT  &mo 1         &trans          &mo 2              &trans
            >;
        };
    };
};
